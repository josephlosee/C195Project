
    /**
     * Returns a LocalDateTime of conflicting schedules
     * //TODO: this must be moved to SQL Customer, each customer will have an appointment list
     * @param customerId
     * @param start
     * @param end
     * @return
     */
    public LocalDateTime canSchedule(int customerId, LocalDateTime start, LocalDateTime end){
        String scheduleQuery = "Select * from appointment where customerId = ? AND ((start between ? and ?) OR end between ? and ?)";
        LocalDateTime dt = null;
        try{
            PreparedStatement st = sqlConnection.prepareStatement(scheduleQuery);
            //I have no idea if this will work, and it will probably need to be changed.

            st.setInt(1, customerId);
            //Make sure the start time is not before the end time of another appt for the same customer
            //TODO: Make this actually work, I think righ tnow it's going to fail regardless, will need to reconstruct
            st.setTimestamp(2, Timestamp.valueOf(start.atOffset(ZoneOffset.UTC).toLocalDateTime()));
            st.setTimestamp(3, Timestamp.valueOf(end.atOffset(ZoneOffset.UTC).toLocalDateTime()));
            st.setTimestamp(4, Timestamp.valueOf(start.atOffset(ZoneOffset.UTC).toLocalDateTime()));
            st.setTimestamp(5, Timestamp.valueOf(end.atOffset(ZoneOffset.UTC).toLocalDateTime()));
            ResultSet rs = st.executeQuery();
            if (rs.next()){
                System.out.println((rs.getTime("start").toLocalTime()));
                System.out.println(rs.getTime("end").toLocalTime());

                //LocalTime start = LocalTime.parse(startTime.toString().toCharArray())

            }

        }catch (SQLException e){
            System.out.println("SQLException in SQLManager.canSchedule: "+e.getMessage());
        }

        return dt; //TODO STUB
    }